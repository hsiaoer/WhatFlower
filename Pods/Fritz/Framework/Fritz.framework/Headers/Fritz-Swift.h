// Generated by Apple Swift version 4.0.3 (swiftlang-900.0.74.1 clang-900.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import CoreML;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("Fritz")
@class MLModel;

/// Manages an MLModel instance
SWIFT_PROTOCOL_NAMED("ReadModelProvider")
@protocol FritzReadModelProvider
/// A read model
@property (nonatomic, readonly, strong) MLModel * _Nonnull model;
@end

@class FritzSession;

/// This is the main entry point to exposing Fritz functionality on your Xcode-generated model classes.
/// seealso:
///
/// <code>SwiftIdentifiedModel</code>
/// <code>ObjcIdentifiedModel</code>
/// note:
/// You should not conform your generated class to this protocol directly, instead conform to either <code>SwiftIdentifiedModel</code> when using Swift, or <code>ObjcIdentifiedModel</code> when using Objective-C.
SWIFT_PROTOCOL_NAMED("BaseIdentifiedModel")
@protocol FritzBaseIdentifiedModel <FritzReadModelProvider>
/// The Fritz model identifier that matches this class.
/// note:
/// You should copy this identifier from the Fritz dashboard
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fritzModelIdentifier;)
+ (NSString * _Nonnull)fritzModelIdentifier SWIFT_WARN_UNUSED_RESULT;
/// This is the version of the model that is packaged with your application at submission time.
/// note:
/// As you upload newer versions of your model to the Fritz dashboard, clients will download those versions and begin using them automatically. This version is specifically for tracking the version that is installed on the device when they first download the app from the App Store. In order to maintain accurate tracking you should update this version number when you package a later version of a model into your app and resubmit to the App Store with that later version.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger fritzPackagedModelVersion;)
+ (NSInteger)fritzPackagedModelVersion SWIFT_WARN_UNUSED_RESULT;
@optional
/// A Fritz session encapsualtes your App Token and the Environment in which to send all Fritz-related requests.
/// note:
/// This is an optional property. By default the SDK will read your App Token from the <code>FritzToken</code> line in your apps Info.plist. However, by providing a <code>Session</code> you have the ability to use models in your app that are from different Fritz accounts. This is useful if you are an SDK author and want to include Fritz as a dependency in your SDK without affecting the end-develoeprs ability to also use Fritz with their App Token.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzSession * _Nonnull fritzSession;)
+ (FritzSession * _Nonnull)fritzSession SWIFT_WARN_UNUSED_RESULT;
@end


/// Fritz Environment Config
SWIFT_CLASS_NAMED("Environment")
@interface FritzEnvironment : NSObject
/// Required initializer
- (nonnull instancetype)initInNamespace:(NSString * _Nonnull)namespace_ apiPath:(NSString * _Nonnull)apiPath OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface FritzEnvironment (SWIFT_EXTENSION(Fritz))
/// Default environment
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzEnvironment * _Nonnull defaultEnvironment;)
+ (FritzEnvironment * _Nonnull)defaultEnvironment SWIFT_WARN_UNUSED_RESULT;
/// Fritz Production environment, default if no environment is specified
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzEnvironment * _Nonnull productionEnvironment;)
+ (FritzEnvironment * _Nonnull)productionEnvironment SWIFT_WARN_UNUSED_RESULT;
/// Fritz Staging environment
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzEnvironment * _Nonnull stagingEnvironment;)
+ (FritzEnvironment * _Nonnull)stagingEnvironment SWIFT_WARN_UNUSED_RESULT;
@end

/// The type of error encountered
typedef SWIFT_ENUM_NAMED(NSInteger, FritzErrorCode, "ErrorCode") {
  FritzErrorCodeModelCompilation = 0,
  FritzErrorCodeModelDownload = 1,
  FritzErrorCodeSessionDisabled = 2,
};

@class NSCoder;

/// Class representing a Fritz-related error
/// note:
/// You subscribe to a notification to be notified anytime an error is encountered in the SDK.
/// seealso:
/// <code>Notification.Name.fritzError</code>
SWIFT_CLASS_NAMED("FritzError")
@interface FritzError : NSError
/// Do not create an instance of this class directly
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end

enum LogLevel : NSInteger;

SWIFT_CLASS_NAMED("FritzSDK")
@interface FritzSDK : NSObject
/// Sets up the Fritz SDK. This should be on startup in <code>AppDelegate.application(didFinishLaunching:)</code>.
/// \param models The list of Fritz models you want to setup.
///
/// \param completionHandler Handler to be called with any errors seting up models, keyed by model identifier.
///
+ (void)setupModels:(NSArray<Class <FritzBaseIdentifiedModel>> * _Nonnull)models completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, NSError *> * _Nonnull))completionHandler;
/// Sets up the Fritz SDK. This should be on startup in <code>AppDelegate.application(didFinishLaunching:)</code>.
/// note:
/// This simply calls <code>setupModels:completionHandler:</code> with a no-op completion handler
/// seealso:
/// <code>setupModels:completionHandler:</code>
/// \param models The list of Fritz models you want to setup.
///
+ (void)setupModels:(NSArray<Class <FritzBaseIdentifiedModel>> * _Nonnull)models;
/// Enables Fritz SDK logging
/// \param level 
/// – 0: Debug logging
/// – 1: Info logging
/// – 2: Warn logging
/// – 3: Error logging
/// – 4: Disable logging
///
+ (void)setLogLevel:(enum LogLevel)level;
/// Cannot instantiate an instance of this class. Use <code>setupModels:</code> instead
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end







/// Logging level for the SDK
/// <ul>
///   <li>
///     debug: log all logs
///   </li>
///   <li>
///     info: log info logs or higher
///   </li>
///   <li>
///     warn: log warning logs or higher
///   </li>
///   <li>
///     error: log error logs only
///   </li>
///   <li>
///     none: disable logging
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, LogLevel) {
  LogLevelDebug = 0,
  LogLevelInfo = 1,
  LogLevelWarn = 2,
  LogLevelError = 3,
  LogLevelNone = 4,
};

@class MLModelDescription;
@protocol MLFeatureProvider;
@class MLPredictionOptions;

SWIFT_CLASS_NAMED("ManagedMLModel")
@interface FritzManagedMLModel : MLModel
/// Initialize model with an ID
- (nonnull instancetype)initWithSession:(FritzSession * _Nonnull)session identifiedModel:(id <FritzBaseIdentifiedModel> _Nonnull)identifiedModel OBJC_DESIGNATED_INITIALIZER;
/// Proxy model description
@property (nonatomic, readonly, strong) MLModelDescription * _Nonnull modelDescription;
/// Override prediction method and pass input/output to analytics
- (id <MLFeatureProvider> _Nullable)predictionFromFeatures:(id <MLFeatureProvider> _Nonnull)input error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Override prediction method and pass input/output to analytics
- (id <MLFeatureProvider> _Nullable)predictionFromFeatures:(id <MLFeatureProvider> _Nonnull)input options:(MLPredictionOptions * _Nonnull)options error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface NSNotification (SWIFT_EXTENSION(Fritz))
/// Subscribe to this notification to receive Fritz-related errors
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FritzErrorNotificationKey;)
+ (NSString * _Nonnull)FritzErrorNotificationKey SWIFT_WARN_UNUSED_RESULT;
/// Subscribe to this notification to know when a Fritz model has been updated
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FritzModelUpdatedNotificationKey;)
+ (NSString * _Nonnull)FritzModelUpdatedNotificationKey SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSObject (SWIFT_EXTENSION(Fritz))
/// Injects a Fritz managed model into this instance allowing the SDK to instrument model predications.
/// warning:
/// When Xcode generates a Swift class based on a MLModel file it provides a read-write model property that allows the SDK to safely overwrite the model with a Fritz managed model. When using Objective-C, Xcode generates a class with a readonly model property which forces us to use <code>setValue:forKey:</code> instead of a type-safe setter. It’s crucial to test your apps on future beta versions of iOS as Apple could change the underlying implementation of the model property causing this method to crash. If this is the case, we will have updated SDKs ready for those newer versions.
/// note:
/// This method will have no affect on any object that does not conform to <code>ObjcIdentifiedModel</code>.
///
/// returns:
/// The same instance that this method was called.
- (nonnull instancetype)fritz SWIFT_WARN_UNUSED_RESULT;
@end


/// Conform your Xcode-generated Objective-C class to this protocol to expose Fritz functionality
/// seealso:
/// <code>BaseIdentifiedModel</code>
SWIFT_PROTOCOL_NAMED("ObjcIdentifiedModel")
@protocol FritzObjcIdentifiedModel <FritzBaseIdentifiedModel>
@end



/// Manages an MLModel instance
SWIFT_PROTOCOL_NAMED("ReadWriteModelProvider")
@protocol FritzReadWriteModelProvider <FritzReadModelProvider>
/// A read-write model
@property (nonatomic, strong) MLModel * _Nonnull model;
@end


/// Encapsualtes your App Token and the Environment in which to send all Fritz-related requests.
/// note:
/// By default the SDK will read your App Token from the <code>FritzToken</code> line in your apps Info.plist. However, by providing a <code>Session</code> when conforming to <code>BaseIdentifiedModel</code> you have the ability to use models in your app that are from different Fritz accounts. This is useful if you are an SDK author and want to include Fritz as a dependency in your SDK without affecting the end-develoeprs ability to also use Fritz with their App Token.
SWIFT_CLASS_NAMED("Session")
@interface FritzSession : NSObject
/// Default session to use throughout SDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FritzSession * _Nonnull defaultSession;)
+ (FritzSession * _Nonnull)defaultSession SWIFT_WARN_UNUSED_RESULT;
/// Create a session in an environment with an app token
- (nonnull instancetype)initWithAppToken:(NSString * _Nonnull)appToken environment:(FritzEnvironment * _Nonnull)environment OBJC_DESIGNATED_INITIALIZER;
/// Create a session in the default environment with an app token
- (nonnull instancetype)initWithAppToken:(NSString * _Nonnull)appToken;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Conform your Xcode-generated Swift class to this protocol to expose Fritz functionality
/// seealso:
/// <code>BaseIdentifiedModel</code>
SWIFT_PROTOCOL_NAMED("SwiftIdentifiedModel")
@protocol FritzSwiftIdentifiedModel <FritzBaseIdentifiedModel, FritzReadWriteModelProvider>
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
